@page "/"
@using AntDesign
@inject MessageService _message
@inject CustomAuthenticationStateProvider CustomAuthProvider
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OmokClient.Services.AuthService AuthService
@inject OmokClient.Services.CharacterService CharacterService

<PageTitle>Login</PageTitle>

<h3>로그인</h3>

<div>
    <form>
        <Space>
            <GridRow Justify="center">
                <AntDesign.Input Placeholder="Email" @bind-Value="@loginEmail" Size="@AntDesign.InputSize.Large">
                    <Prefix>
                        <Icon Type="user" />
                    </Prefix>
                </AntDesign.Input>
            </GridRow>
            <Space />
            <GridRow Justify="center">
                <InputPassword Placeholder="Password" @bind-Value="@loginPassword" Size="@AntDesign.InputSize.Large">
                    <Prefix>
                        <Icon Type="lock" />
                    </Prefix>
                </InputPassword>
            </GridRow>
            <Space />
            <GridRow Justify="end">
                <SpaceItem>
                    <Button Type="primary" Size="large" OnClick="LoginUser">
                        로그인
                    </Button>
                </SpaceItem>
            </GridRow>
        </Space>
    </form>
    <form>
        <Space>
            <SpaceItem>
                <Button Type="dashed" OnClick="MoveToRegisterPage">
                    아직 계정이 없습니까? 회원가입하기
                </Button>
            </SpaceItem>
        </Space> 
    </form>
</div>

@code {
    private string loginEmail = string.Empty;
    private string loginPassword = string.Empty;

    private async Task LoginUser()
    {
        var loginResponse = await AuthService.LoginUserAsync(loginEmail, loginPassword);
        if (loginResponse?.Result == ErrorCode.None)
        {
            Console.WriteLine("Login successful");
            await _message.Success("하이브 로그인 성공");

            var gameLoginResponse = await AuthService.GameLoginAsync(loginResponse);
            if (gameLoginResponse?.Result == ErrorCode.None)
            {
                Console.WriteLine("Game login successful");
                await _message.Success("게임 로그인 성공");

                CustomAuthProvider.NotifyUserLoggedIn(loginResponse.HivePlayerId);

                await sessionStorage.SetItemAsync("sessionUserId", loginEmail);

                var charName = await CharacterService.GetCharacterNameAsync(loginEmail);
                await sessionStorage.SetItemAsync("sessionCharName", charName);

                Console.WriteLine("Navigating to /gamestart");
                Navigation.NavigateTo("gamestart", true);
            }
            else
            {
                Console.WriteLine("Game login failed: " + gameLoginResponse?.Result);
                await _message.Error("게임 로그인 실패: " + gameLoginResponse?.Result, 5);
            }
        }
        else
        {
            Console.WriteLine("Login failed: " + loginResponse?.Result);
            await _message.Error("하이브 로그인 실패: " + loginResponse?.Result, 5);
        }
    }

    private void MoveToRegisterPage()
    {
        Navigation.NavigateTo("register");
    }
}

<style>
    h3 {
        font-family: 'Arial', sans-serif;
        font-size: 3em;
        font-weight: bold;
        color: #2c3e50;
    }

    p {
        font-family: 'Verdana', sans-serif;
        font-size: 1.2em;
        font-weight: normal;
        line-height: 1.5;
        color: #7f8c8d;
    }
</style>
