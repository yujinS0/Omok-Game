@page "/omok"
@using Blazored.SessionStorage
@inject ISessionStorageService sessionStorage

<h3>Omok Game</h3>

<div class="wrapper">
    <div class="omok-container">
        <table class="omok-table">
            @for (int i = 0; i < 15; i++)
            {
                <tr>
                    @for (int j = 0; j < 15; j++)
                    {
                        var row = i;
                        var col = j;
                        <td>
                            <button @onclick="@(args => PlaceStone(row, col))" class="omok-button" onmouseover="this.style.border='2px solid #000'" onmouseout="this.style.border='1px solid #ccc'">
                                <img src="@GetStoneImage(row, col)" alt="stone" class="stone-img" />
                            </button>
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    <div class="info-container">
        <div class="info-item">내 닉네임: <span class="info-value">@playerId</span></div>
        <div class="info-item">상대 닉네임: <span class="info-value">@opponent</span></div>
        <div class="info-item">현재 차례: <span class="info-value">@currentTurn</span></div>
        <div class="info-item">남은 시간: <span class="info-value">00:30</span></div>
    </div>
</div>

@code {
    private string[,] board;
    private string playerId;
    private string opponent = "상대";

    protected override async Task OnInitializedAsync()
    {
        playerId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        board = new string[15, 15]; // 배열 초기화
    }

    protected override void OnInitialized()
    {
        board = new string[15, 15]; // 배열 초기화
    }

    private string currentTurn = "black";

    private async Task PlaceStone(int row, int col)
    {
        Console.WriteLine($"PlaceStone called with row: {row}, col: {col}");

        if (row < 0 || row >= 15 || col < 0 || col >= 15)
        {
            Console.WriteLine("Index out of bounds.");
            return; // 배열 경계 검사
        }

        if (board[row, col] != null)
        {
            Console.WriteLine("Position already occupied.");
            return; // 이미 돌이 있는 곳에는 둘 수 없음
        }

        var response = "black";  // 임시로 설정된 현재 턴
        if (response == currentTurn)
        {
            board[row, col] = currentTurn;
            currentTurn = currentTurn == "black" ? "white" : "black";
            Console.WriteLine($"Placed {board[row, col]} stone at row: {row}, col: {col}");
        }
        else
        {
            Console.WriteLine($"Turn mismatch: expected {currentTurn}, got {response}");
        }
        StateHasChanged();
    }

    private string GetStoneImage(int row, int col)
    {
        if (row < 0 || row >= 15 || col < 0 || col >= 15)
        {
            return "/images/empty.png"; // 배열 경계 검사
        }

        if (board[row, col] == "black")
        {
            return "/images/black_stone.png";
        }
        else if (board[row, col] == "white")
        {
            return "/images/white_stone.png";
        }
        else
        {
            return "/images/empty.png";
        }
    }
}

<style>
    body {
        margin: 0;
        padding: 0;
        background-color: #FFF8DC; /* 페이지 전체 배경 색상 */
        overflow: hidden;
    }

    .wrapper {
        display: flex;
        justify-content: flex-start; /* 왼쪽 정렬 */
        align-items: flex-start; /* 위쪽 정렬 */
        height: 100vh;
        width: 100%;
        padding: 20px; /* 원하는 여백 설정 */
    }

    .info-container {
        width: 300px;
        max-width: 20vw; /* 최대 너비 설정 */
        margin-bottom: 20px;
        padding: 10px;
        background-color: #FFD700;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .info-item {
        font-size: 18px;
        margin: 5px 0;
        display: flex;
        justify-content: space-between;
    }

    .info-value {
        font-weight: bold;
    }

    .omok-container {
        background-color: #F5DEB3;
        border-collapse: collapse;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 80vw; /* 최대 너비 설정 */
        margin-bottom: 20px;
    }

    .omok-table {
        width: 100%;
        border-collapse: collapse;
    }

        .omok-table td {
            padding: 0;
        }

    .omok-button {
        width: 40px;
        height: 40px;
        padding: 0;
        border: 1px solid #ccc;
        background-color: transparent;
    }

        .omok-button:hover {
            cursor: pointer;
            border: 2px solid #000;
        }

    .stone-img {
        width: 100%;
        height: 100%;
    }

</style>