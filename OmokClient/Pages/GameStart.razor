@page "/gamestart"
@using Microsoft.AspNetCore.Components
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<GameStart> Logger
@using AntDesign
@using Blazored.SessionStorage
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OmokClient.Services
@inject ISessionStorageService sessionStorage
@inject MatchingService MatchingService
@inject PlayerService PlayerService

<PageTitle>Matching</PageTitle>

<div class="main-content">
    <div class="matching-container">
        <h3>오목 게임</h3>

        <p>오목 게임에 오신 것을 환영합니다!!</p>

        <p>매칭을 원하신다면 아래 매칭 버튼을 눌러주세요.</p>
        <Button Type="primary" Size="large" OnClick="StartMatching" disabled="@isMatching"> 매칭 시작 </Button>

        @if (isMatching)
        {
            <Button type="primary" Size="large" loading>
                매칭 상대 찾는 중 ...
            </Button>
        }
    </div>
</div>

@code {
    private string userId = string.Empty;
    private bool isAuthenticated = false;
    private string username = string.Empty;
    private string sessionStorageId = string.Empty;
    private string newNickName = string.Empty;
    private string nickName = string.Empty;
    private int exp;
    private int level;
    private int win;
    private int lose;
    private int draw;
    private bool isMatching = false;
    private bool isLoading = true;
    private Timer? checkMatchTimer;

    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        Navigation.LocationChanged += HandleLocationChanged;
        await LoadSessionDataAsync();
        if (MainLayout != null)
        {
            await MainLayout.ForceReload(); // 강제 리로드 호출
        }
    }

    private async Task LoadSessionDataAsync()
    {
        userId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        sessionStorageId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        nickName = await sessionStorage.GetItemAsync<string>("sessionNickName") ?? string.Empty;
        exp = await sessionStorage.GetItemAsync<int>("sessionExp");
        level = await sessionStorage.GetItemAsync<int>("sessionLevel");
        win = await sessionStorage.GetItemAsync<int>("sessionWin");
        lose = await sessionStorage.GetItemAsync<int>("sessionLose");
        draw = await sessionStorage.GetItemAsync<int>("sessionDraw");
        StateHasChanged();
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadSessionDataAsync();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }

    private async Task CreateNickname()
    {
        if (!string.IsNullOrEmpty(newNickName))
        {
            var updateResponse = await PlayerService.UpdateNickNameAsync(userId, newNickName);
            if (updateResponse != null && updateResponse.Result == ErrorCode.None)
            {
                nickName = newNickName;
                StateHasChanged();
            }
        }
    }

    private async Task StartMatching()
    {
        Console.WriteLine("Start matching button clicked.");
        isMatching = true;

        var matchResponse = await MatchingService.RequestMatchingAsync(userId);
        if (matchResponse != null && matchResponse.Result == ErrorCode.None)
        {
            Console.WriteLine("Matching request successful.");
            isMatching = true;
            StartCheckMatching();
        }
        else
        {
            Console.WriteLine($"Matching request failed: {matchResponse?.Result}");
            isMatching = false;
        }

        Console.WriteLine("Matching process completed.");
    }

    private void StartCheckMatching()
    {
        checkMatchTimer = new Timer(async _ =>
        {
            await CheckMatching();
        }, null, 1000, 1000);
    }

    private async Task CheckMatching()
    {
        Console.WriteLine("Checking match status...");

        var matchResponse = await MatchingService.CheckMatchingAsync(userId);
        if (matchResponse != null && matchResponse.Success == 1)
        {
            Console.WriteLine("Match found! Navigating to game page.");
            checkMatchTimer?.Dispose();
            Navigation.NavigateTo("omok", true);
        }
        else
        {
            Console.WriteLine("No match found yet.");
        }
    }
}

<style>
    .matching-container {
        text-align: center;
        padding: 20px;
    }

    h3 {
        font-family: 'Arial', sans-serif;
        font-size: 3em;
        font-weight: bold;
        color: #2c3e50;
    }

    h4 {
        font-family: 'Arial', sans-serif;
        font-size: 2em;
        font-weight: normal;
        color: #34495e;
    }

    p {
        font-family: 'Verdana', sans-serif;
        font-size: 1.2em;
        font-weight: normal;
        line-height: 1.5;
        color: #7f8c8d;
    }
</style>
