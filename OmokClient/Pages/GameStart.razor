@page "/gamestart"
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<GameStart> Logger
@using AntDesign
@using Blazored.SessionStorage
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OmokClient.Services
@inject ISessionStorageService sessionStorage
@inject MatchingService MatchingService
@inject CharacterService CharacterService

<PageTitle>Matching</PageTitle>

<h3>오목 게임</h3>

<h4>안녕하세요! @userId !</h4>

<p>오목 게임에 오신 것을 환영합니다!!</p>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (string.IsNullOrEmpty(charName))
{
    <h4>닉네임을 생성해주세요</h4>
    <Input placeholder="닉네임 입력" @bind-Value="newCharName" />
    <Button Type="primary" Size="large" OnClick="CreateNickname">닉네임 생성</Button>
}
else
{
    <h4>플레이어 정보</h4>
    <div class="info-container">
        <div class="info-item">닉네임: <span class="info-value">@charName</span></div>
        <div class="info-item">경험치: <span class="info-value">@exp</span></div>
        <div class="info-item">레벨: <span class="info-value">@level</span></div>

        <p>전적</p>
        <div class="info-item">승리: <span class="info-value">@win</span></div>
        <div class="info-item">패배: <span class="info-value">@lose</span></div>
        <div class="info-item">무승부: <span class="info-value">@draw</span></div>
    </div>

    <p>매칭을 원하신다면 아래 매칭 버튼을 눌러주세요.</p>
    <Button Type="primary" Size="large" OnClick="StartMatching" disabled="@isMatching"> 매칭 시작 </Button>

    @if (isMatching)
    {
        <Button type="primary" Size="large" loading>
            매칭 상대 찾는 중 ...
        </Button>
    }
}

@code {
    private string userId = string.Empty;
    private string charName = string.Empty;
    private string newCharName = string.Empty;
    private int exp;
    private int level;
    private int win;
    private int lose;
    private int draw;
    private bool isMatching = false;
    private bool isLoading = true;
    private Timer? checkMatchTimer;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("GameStart page initialized.");

        userId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        charName = await sessionStorage.GetItemAsync<string>("sessionCharName") ?? string.Empty;

        if (!string.IsNullOrEmpty(userId))
        {
            charName = await CharacterService.GetCharacterNameAsync(userId);

            if (!string.IsNullOrEmpty(charName))
            {
                var characterInfo = await CharacterService.GetCharacterInfoAsync(userId);
                if (characterInfo != null && characterInfo.Error == ErrorCode.None)
                {
                    charName = characterInfo.CharacterInfo.CharName;
                    exp = characterInfo.CharacterInfo.CharExp;
                    level = characterInfo.CharacterInfo.CharLevel;
                    win = characterInfo.CharacterInfo.CharWin;
                    lose = characterInfo.CharacterInfo.CharLose;
                    draw = characterInfo.CharacterInfo.CharDraw;
                }
            }
        }
        isLoading = false;
    }

    private async Task CreateNickname()
    {
        if (!string.IsNullOrEmpty(newCharName))
        {
            var updateResponse = await CharacterService.UpdateCharacterNameAsync(userId, newCharName);
            if (updateResponse != null && updateResponse.Error == ErrorCode.None)
            {
                charName = newCharName;
                StateHasChanged();
            }
        }
    }

    private async Task StartMatching()
    {
        Console.WriteLine("Start matching button clicked.");
        isMatching = true;

        var matchResponse = await MatchingService.RequestMatchingAsync(userId);
        if (matchResponse != null && matchResponse.Result == ErrorCode.None)
        {
            Console.WriteLine("Matching request successful.");
            isMatching = true;
            StartCheckMatching();
        }
        else
        {
            Console.WriteLine($"Matching request failed: {matchResponse?.Result}");
            isMatching = false;
        }

        Console.WriteLine("Matching process completed.");
    }

    private void StartCheckMatching()
    {
        checkMatchTimer = new Timer(async _ =>
        {
            await CheckMatching();
        }, null, 1000, 1000);
    }

    private async Task CheckMatching()
    {
        Console.WriteLine("Checking match status...");

        var matchResponse = await MatchingService.CheckMatchingAsync(userId);
        if (matchResponse != null && matchResponse.Success == 1)
        {
            Console.WriteLine("Match found! Navigating to game page.");
            checkMatchTimer?.Dispose();
            Navigation.NavigateTo("omok", true);
        }
        else
        {
            Console.WriteLine("No match found yet.");
        }
    }
}

<style>
    h3 {
        font-family: 'Arial', sans-serif;
        font-size: 3em;
        font-weight: bold;
        color: #2c3e50;
    }

    h4 {
        font-family: 'Arial', sans-serif;
        font-size: 2em;
        font-weight: normal;
        color: #34495e;
    }

    p {
        font-family: 'Verdana', sans-serif;
        font-size: 1.2em;
        font-weight: normal;
        line-height: 1.5;
        color: #7f8c8d;
    }
</style>
