@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.SessionStorage
@using OmokClient.Services
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService sessionStorage
@inject NavigationManager Navigation
@inject PlayerService PlayerService

<CascadingValue Value="this">
    <div class="page">
        <header class="top-row px-4">
            @if (!string.IsNullOrEmpty(sessionStorageId))
            {
                <span class="user-email">Welcome, @sessionStorageId!</span>
            }
        </header>
        @if (!IsHomePage && !IsRegisterPage)
        {
            <div class="content-wrapper">
                <div class="player-info">
                    <div class="player-info-text">
                        <h3>플레이어 정보</h3>
                        <!-- Player Information Here -->
                        <div>닉네임: @nickName</div>
                        <div>경험치: @exp</div>
                        <div>레벨: @level</div>
                        <div>승리: @win</div>
                        <div>패배: @lose</div>
                        <div>무승부: @draw</div>
                    </div>
                </div>
                @if (OverlayContent != null)
                {
                    <div class="overlay-content">
                        @OverlayContent
                    </div>
                }
                <div class="main-content @(OverlayContent != null ? "with-overlay" : "")">
                    @Body
                </div>
            </div>
        }
        else
        {
            <div class="content-wrapper">
                <div class="main-content">
                    @Body
                </div>
            </div>
        }

        @if (!IsHomePage && !IsRegisterPage)
        {
            <footer class="bottomappbar">
                <div class="bottom-navbar">
                    <button class="nav-button" @onclick="ToggleMailbox">우편함</button>
                    <button class="nav-button" @onclick="ToggleItems">아이템</button>
                    <button class="nav-button" @onclick="ToggleAttendance">출석부</button>
                    <button class="nav-button" @onclick="ToggleShop">상점</button>
                </div>
            </footer>
        }
    </div>
</CascadingValue>

@code {
    private bool isAuthenticated = false;
    private string username = string.Empty;
    private string sessionStorageId = string.Empty;
    private string nickName = string.Empty;
    private int exp;
    private int level;
    private int win;
    private int lose;
    private int draw;
    private RenderFragment? OverlayContent;
    private bool IsHomePage => Navigation.Uri.EndsWith("/");
    private bool IsRegisterPage => Navigation.Uri.EndsWith("/register");
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        sessionStorageId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        nickName = await sessionStorage.GetItemAsync<string>("sessionNickName") ?? string.Empty;
        exp = await sessionStorage.GetItemAsync<int>("sessionExp");
        level = await sessionStorage.GetItemAsync<int>("sessionLevel");
        win = await sessionStorage.GetItemAsync<int>("sessionWin");
        lose = await sessionStorage.GetItemAsync<int>("sessionLose");
        draw = await sessionStorage.GetItemAsync<int>("sessionDraw");
        await UpdatePlayerBasicInfo();
    }

    public async Task ForceReload()
    {
        await UpdatePlayerBasicInfo();
        StateHasChanged();
    }

    private async Task UpdatePlayerBasicInfo()
    {
        var userId = sessionStorageId;
        if (!string.IsNullOrEmpty(userId))
        {
            var characterInfo = await PlayerService.GetPlayerBasicInfoAsync(userId);
            if (characterInfo != null && characterInfo.Result == ErrorCode.None)
            {
                nickName = characterInfo.PlayerBasicInfo.NickName;
                exp = characterInfo.PlayerBasicInfo.Exp;
                level = characterInfo.PlayerBasicInfo.Level;
                win = characterInfo.PlayerBasicInfo.Win;
                lose = characterInfo.PlayerBasicInfo.Lose;
                draw = characterInfo.PlayerBasicInfo.Draw;
            }
            await sessionStorage.SetItemAsync("sessionNickName", nickName);
            await sessionStorage.SetItemAsync("sessionExp", exp);
            await sessionStorage.SetItemAsync("sessionLevel", level);
            await sessionStorage.SetItemAsync("sessionWin", win);
            await sessionStorage.SetItemAsync("sessionLose", lose);
            await sessionStorage.SetItemAsync("sessionDraw", draw);
        }
    }

    private void ToggleOverlayContent(RenderFragment? content)
    {
        if (OverlayContent == content)
        {
            OverlayContent = null;
        }
        else
        {
            OverlayContent = content;
        }
    }

    private void ToggleMailbox()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "우편함 내용");
        });
    }

    private void ToggleItems()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "아이템 내용");
        });
    }

    private void ToggleAttendance()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "출석부 내용");
        });
    }

    private void ToggleShop()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "상점 내용");
        });
    }
}
