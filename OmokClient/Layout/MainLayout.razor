@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.SessionStorage
@using OmokClient.Services
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService sessionStorage
@inject NavigationManager Navigation
@inject PlayerService PlayerService

<CascadingValue Value="this">
    <div class="page">
        <header class="top-row px-4">
            @if (!string.IsNullOrEmpty(sessionStorageId))
            {
                <span class="user-email">Welcome, @sessionStorageId!</span>
            }
        </header>
        @if (!IsHomePage && !IsRegisterPage)
        {
            <div class="content-wrapper">
                <div class="player-info">
                    <div class="player-info-text">
                        <h3>플레이어 정보</h3>
                        <!-- Player Information Here -->
                        <div>닉네임: @nickName</div>
                        <div>게임 머니: @gameMoney</div>
                        <div>다이아몬드: @diamond</div>
                        <div>경험치: @exp</div>
                        <div>레벨: @level</div>
                        <div>승리: @win</div>
                        <div>패배: @lose</div>
                        <div>무승부: @draw</div>
                    </div>
                </div>
                @if (OverlayContent != null)
                {
                    <div class="overlay-content">
                        @OverlayContent
                    </div>
                }
                <div class="main-content @(OverlayContent != null ? "with-overlay" : "")">
                    @Body
                </div>
            </div>
        }
        else
        {
            <div class="content-wrapper">
                <div class="main-content">
                    @Body
                </div>
            </div>
        }

        @if (!IsHomePage && !IsRegisterPage)
        {
            <footer class="bottomappbar">
                <div class="bottom-navbar">
                    <button class="nav-button" @onclick="ToggleMailbox">우편함</button>
                    <button class="nav-button" @onclick="ToggleItems">아이템</button>
                    <button class="nav-button" @onclick="ToggleAttendance">출석부</button>
                    <button class="nav-button" @onclick="ToggleShop">상점</button>
                </div>
            </footer>
        }
    </div>
</CascadingValue>

@code {
    private bool isAuthenticated = false;
    private string username = string.Empty;
    private string sessionStorageId = string.Empty;
    private string nickName = string.Empty;
    private long gameMoney;
    private long diamond;
    private int exp;
    private int level;
    private int win;
    private int lose;
    private int draw;
    private RenderFragment? OverlayContent;
    private bool IsHomePage => Navigation.Uri.EndsWith("/");
    private bool IsRegisterPage => Navigation.Uri.EndsWith("/register");
    private string userId = string.Empty;
    private List<PlayerItem> playerItems;

    protected override async Task OnInitializedAsync()
    {
        sessionStorageId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;
        nickName = await sessionStorage.GetItemAsync<string>("sessionNickName") ?? string.Empty;
        gameMoney = await sessionStorage.GetItemAsync<long>("sessionGameMoney");
        diamond = await sessionStorage.GetItemAsync<long>("sessionDiamond");
        exp = await sessionStorage.GetItemAsync<int>("sessionExp");
        level = await sessionStorage.GetItemAsync<int>("sessionLevel");
        win = await sessionStorage.GetItemAsync<int>("sessionWin");
        lose = await sessionStorage.GetItemAsync<int>("sessionLose");
        draw = await sessionStorage.GetItemAsync<int>("sessionDraw");
        await UpdatePlayerBasicInfo();
    }

    public async Task ForceReload()
    {
        await UpdatePlayerBasicInfo();
        StateHasChanged();
    }

    private async Task UpdatePlayerBasicInfo()
    {
        var playerId = sessionStorageId;
        if (!string.IsNullOrEmpty(playerId))
        {
            var characterInfo = await PlayerService.GetPlayerBasicInfoAsync(playerId);
            if (characterInfo != null && characterInfo.Result == ErrorCode.None)
            {
                nickName = characterInfo.PlayerBasicInfo.NickName;
                gameMoney = characterInfo.PlayerBasicInfo.GameMoney;
                diamond = characterInfo.PlayerBasicInfo.Diamond;
                exp = characterInfo.PlayerBasicInfo.Exp;
                level = characterInfo.PlayerBasicInfo.Level;
                win = characterInfo.PlayerBasicInfo.Win;
                lose = characterInfo.PlayerBasicInfo.Lose;
                draw = characterInfo.PlayerBasicInfo.Draw;
            }
            await sessionStorage.SetItemAsync("sessionNickName", nickName);
            await sessionStorage.SetItemAsync("sessionGameMoney", gameMoney);
            await sessionStorage.SetItemAsync("sessionDiamond", diamond);
            await sessionStorage.SetItemAsync("sessionExp", exp);
            await sessionStorage.SetItemAsync("sessionLevel", level);
            await sessionStorage.SetItemAsync("sessionWin", win);
            await sessionStorage.SetItemAsync("sessionLose", lose);
            await sessionStorage.SetItemAsync("sessionDraw", draw);
        }
    }

    private async Task ToggleOverlayContent(RenderFragment? content)
    {
        if (OverlayContent == content)
        {
            OverlayContent = null;
        }
        else
        {
            OverlayContent = content;
        }
        await InvokeAsync(StateHasChanged); // UI 업데이트 보장
    }

    private void ToggleMailbox()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "우편함 내용");
        });
    }

    private async Task ToggleItems()
    {
        var playerId = sessionStorageId;
        var response = await PlayerService.GetPlayerItemsAsync(playerId, 1); // 페이지 번호를 1로 하드코딩

        if (response.Result == ErrorCode.None)
        {
            playerItems = response.PlayerItemCode.Select((code, index) => new PlayerItem
                {
                    PlayerItemCode = code,
                    ItemCode = response.ItemCode[index],
                    ItemCnt = response.ItemCnt[index]
                }).ToList();
        }
        else
        {
            playerItems = new List<PlayerItem>(); // 오류 시 빈 리스트 반환
        }

        ToggleOverlayContent(builder =>
        {
            builder.OpenElement(0, "table");
            builder.AddAttribute(1, "class", "table");
            builder.OpenElement(2, "thead");
            builder.OpenElement(3, "tr");
            builder.OpenElement(4, "th");
            builder.AddContent(5, "Player Item Code");
            builder.CloseElement();
            builder.OpenElement(6, "th");
            builder.AddContent(7, "Item Name");
            builder.CloseElement();
            builder.OpenElement(8, "th");
            builder.AddContent(9, "Item Count");
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.OpenElement(10, "tbody");
            foreach (var item in playerItems)
            {
                builder.OpenElement(11, "tr");
                builder.OpenElement(12, "td");
                builder.AddContent(13, item.PlayerItemCode);
                builder.CloseElement();
                builder.OpenElement(14, "td");
                builder.AddContent(15, MasterData.ItemCodeToNameMap.ContainsKey(item.ItemCode) ? MasterData.ItemCodeToNameMap[item.ItemCode] : "Unknown Item");
                builder.CloseElement();
                builder.OpenElement(16, "td");
                builder.AddContent(17, item.ItemCnt);
                builder.CloseElement();
                builder.CloseElement();
            }
            builder.CloseElement();
            builder.CloseElement();
        });
    }



    private void ToggleAttendance()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "출석부 내용");
        });
    }

    private void ToggleShop()
    {
        ToggleOverlayContent(builder =>
        {
            builder.AddContent(0, "상점 내용");
        });
    }
}
<style>
    .table th, .table td {
        color: white;
    }
</style>