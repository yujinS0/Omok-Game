@inherits LayoutComponentBase
@using Blazored.SessionStorage
@inject ISessionStorageService sessionStorage

<div class="omok-board">
    @for (int row = 0; row < 15; row++)
    {
        <div class="row">
            @for (int col = 0; col < 15; col++)
            {
                <div class="cell" @onclick="() => MakeMove(row, col)">
                    @if (board[row, col] != StoneType.Empty)
                    {
                        <div class="@(board[row, col] == StoneType.Black ? "black-stone" : "white-stone")"></div>
                    }
                </div>
            }
        </div>
    }
</div>

<div class="info-panel">
    <div>
        <p>나: @userId</p>
        <p>상대: @opponentId</p>
        <p>현재 차례: @currentTurn</p>
    </div>
    <p>남은 시간: @remainingTime 초</p>
    <div class="button-container">
        <button>게임 초기화</button>
        <button>취소 요청</button>
    </div>
</div>

@code {
    private string userId = string.Empty;
    private string opponentId = "Opponent"; // 임시로 설정, 추후 API를 통해 가져올 예정
    private string currentTurn = "User"; // 임시로 설정, 추후 API를 통해 가져올 예정
    private int remainingTime = 30;
    private StoneType[,] board = new StoneType[15, 15];

    protected override async Task OnInitializedAsync()
    {
        userId = await sessionStorage.GetItemAsync<string>("sessionUserId") ?? string.Empty;

        ResetBoard();

        // 타이머 시작
        StartTimer();
    }
    private void ResetBoard()
    {
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                board[i, j] = StoneType.Empty;
            }
        }
        currentTurn = "Black";
        StateHasChanged();
    }

    private void MakeMove(int row, int col)
    {
        if (row < 0 || row >= 15 || col < 0 || col >= 15)
        {
            // 배열의 범위를 벗어나는 경우
            return;
        }

        if (board[row, col] != StoneType.Empty)
        {
            return;
        }

        board[row, col] = currentTurn == "Black" ? StoneType.Black : StoneType.White;

        if (CheckWin(row, col))
        {
            // 승리 처리
            return;
        }

        currentTurn = currentTurn == "Black" ? "White" : "Black";
        StateHasChanged();
    }

    private bool CheckWin(int row, int col)
    {
        return CheckLine(row, col, -1, 0) || // 수직
               CheckLine(row, col, 0, -1) || // 수평
               CheckLine(row, col, -1, -1) || // 대각선
               CheckLine(row, col, -1, 1); // 반대 대각선
    }

    private bool CheckLine(int row, int col, int dRow, int dCol)
    {
        int count = 0;
        for (int i = -4; i <= 4; i++)
        {
            int r = row + i * dRow;
            int c = col + i * dCol;
            if (r >= 0 && r < 15 && c >= 0 && c < 15 && board[r, c] == (currentTurn == "Black" ? StoneType.Black : StoneType.White))
            {
                count++;
                if (count == 5) return true;
            }
            else
            {
                count = 0;
            }
        }
        return false;
    }

    private void StartTimer()
    {
        Timer timer = new Timer(async _ =>
        {
            if (remainingTime > 0)
            {
                remainingTime--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                // 시간 초과 처리 로직
            }
        }, null, 1000, 1000);
    }

    private enum StoneType
    {
        Empty,
        Black,
        White
    }
}